# PODNAME: Miril::Manual

# ABSTRACT: Why and how to use Miril, the static content management sytem.

=pod

=head1 WHAT IS MIRIL

Miril is a Perl framework for generating html websites from static content stored in files.

=head1 WHY USE MIRIL

=over

=item * 

Miril stores your data in text files and publishes it to static pages. Unlike homegrown static publishing solutions (e.g. scripts using the Template Toolkit), Miril provides a user interface for editing content (web-based or via a command-line application).

=item * 

Miril has been designed from the very start to be extremely easy to deploy. The main distribution has only pure-perl dependencies. Stable Miril versions are also be available in a tarball with all dependencies bundled, so that deploying on a typical shared host should be a as easy as unpacking and configuring.

=item * 

Miril has been designed with small to medium-sized websites in mind, i.e. websites with hundreds of pages as opposed to thousands of pages. If you have a typical small website such as a corporate website or a personal blog Miril may be a better option for you than full-blown content management systems since it is faster to deploy, easier to manage, and generally has less administrative overhead both for the site administrator and the users.

=back

=head1 DEPLOYMENT OPTIONS

Miril's user interface runs as a cgi script. This means that:

=over

=item *

On a shared host, you can run Miril from your C<cgi-bin> directory. It will run slower than in a persistent environment, but since Miril will be used only when managing content this should not be a problem.

=item *

Of course, if you have sufficient control over your environment and the load on Miril demands it, you can accelerate Miril by running it under C<FastCGI> or C<mod_perl>.

=item *

Miril is also available as a C<PSGI> appliction, so you can use it with any C<Plack>-compatible server, or augment it with C<Plack> middleware.

=item *

Because Miril ultimately produces static content only, you can run it from your local machine and then synchronize your local output directory with the web server. This way you can manage websites on servers that don't even have C<perl> installed, or where installing Miril would be difficult.

=back

=head1 INSTALLATION

Currently Miril is installable only from C<CPAN>. Simply run C<install Miril> from your favourite C<CPAN> shell. The CPAN distribution comes with an example website you can build on to get started faster.

=head1 CONFIGURATION

=head2 Create required folders

  ~ $ mkdir ./mywebsite              # base directory for the website           
  ~ $ mkdir ./mywebsite/templates    # you will put your templates here
  ~ $ mkdir ./mywebsite/www          # Miril will place the HTML output here

=head2 Configuration file

The configuration file contains everything Miril needs to know in order to manage your website. Miril will look for a configuration file named C<miril.conf> in the base directory of the website. L<Config::General> is used for parsing the file contents.

  ~ $ vi ./mywebsite/miril.conf

=over

=item Website name

  name "Mechanical Revolution"

This is the name of your website. Optional, as it is only used by the UI.

=item Output path

  output "www"

This is the directory where Miril will place all the output files it produces.
The default location is C<www>, which means that Miril will save the HTML files in the C<www> subdirectory of your base directory, creating that directory if necessary.
This option is useful primarily if you are running Miril on a shared hosting environment and want your output to be directly in the web server's document root. E.g.:

  # base dir is ~/miril/mywebsite
  output "~/public_html/mywebsite"

=back

=head3 Content types

Next you need to configure your content types. This is what a basic configuration looks like:

  <type blog>
    name     Blog
    location blog/%(id)s.html
    template blog.tt
    fields   topic, author
  </type>

  <type page>
    name     Page
    location %(id)s.html
    template page.tt
  </type>

Content types are essentially a useful way to classify your html pages by function. You need to have at least one content type defined.

=over

=item id

A unique alphanumeric string identifying the content type, used internally by Miril, e.g. C<blog>.

=item name

The user-friendly name of the content type (as it would be seen in the UI), e.g. C<Blog>.

=item location

The location, relative to C<output>, where Miril will write entries of this content type, e.g. C<blog/%(id)s.html>. The location template uses L<Text::Sprintf::Named> for substitutions. The C<id> parameter will contain the id of the post being published.

=item template

The template file Miril will use to create html pages of this content type, e.g. C<blog.tt>.

=item fields

Comma-separated list id's of addtional custom fields that will be associated with this type - see below for details.

=back

=head3 Fields

Each content item (a.k.a. "post") in Miril comes with a number of default fields, such as name, date published, etc. (see the full documentation is in L</Posts> below). In addition, Miril allows you to define custom field that can can be associated with one or more content types. Here is how you define a new field:

  <field topic>
    name     Topics
    class    Option
    multiple yes
    required no
    <options>
      perl5   Perl 5
      perl6   Perl 6
      ruby    Ruby
      python  Python
      js      JavaScript
    </options>
  </field>

=over

=item id

Unique alphanumeric id for this field.

=item name

User-friendly name for the field. You will use this name to access the field in templates.

=item required

Boolean indicating whether the field is required or not. Off by default.

=item class

The class, or type of the field, determines a number of its properties, such as what kind of data it can hold, how its data will be accessed, and how it will appear in the user interface. Currently, only C<Text> and C<Option> field classes are available. A C<Text> field allows you to store and retrive simple text, and edit it via a text box. An C<Option> fields allows you store key/value pairs editable via a select box.

=back

Any other options will be passed directly to the the respective field class, it it should know how to handle them. Specifically, the C<Option> class currently accepts the follwing additional parameters:

=over

=item multiple

Booliean indicating whether multiple values can be selected at onece. Off by default.

=item options

The key/value map of options available for selection.

=back

See below for information on how to use access fields inside templates.

=head3 Lists

Miril allows you to create special pages which combine data from multiple posts - e.g. a list of articles, a RSS feed, etc. This is how you configure lists:

  <list front>
    name "Front Page"
    template list.tt
    location index.html
    <match>
      type blog
      limit 6
    </match>
  </list>

  <list feed>
    name "Atom Feed"
    template atom.tt
    location feed.xml
    <match>
      type blog
      limit 10
    </match>
  </list>

=over

=item id

A unique alphanumeric string identifying the list.

=item name

The user-friendly name of the content type, to be used e.g. in the page title.

=item template

The template file Miril will use to create this list.

=item location

The location of the file, relative to C<output>, where Miril will write this list. If this is a grouped or paged list (see C<group> and C<page> below) this parameter accepts a L<Text::Sprintf::Named> string used to generate the location of the individual grouped or paged lists. 

=back

=head4 Parameters accepted for grouped lists

=over

=item * 

Lists grouped by date: C<date>, C<year>, C<month>. 

=item * 

Lists grouped by month: C<year>, C<month>. 

=item * 

Lists grouped by year: C<year>. 

=item * 

Lists grouped by topic: C<topic>. 

=item * 

Lists grouped by type: C<type>. 

=item * 

Lists grouped by author: C<author>. 

=back

=head4 Parameters accepted for paged lists

=over

=item * 

C<page>, specifies the current page number

=back

=over

=item group

Specifies a grouped list. A grouped list will split the posts it matches into groups and output individual files for each group. This is a powerful option that allows you for example to create archives by month or by year or create lists of posts by topic. The following values for the group option are accepted: C<date>, C<month>, C<year>, C<topic>, C<type>, C<author>. C<group> works in conjunction with a sprintf-like format in the C<location> option to define the output paths for the individual list files to be produced.

=item page

Specifies a paged list. A paged list will split the posts it matches into smaller lists each containing the number of posts specified as an argument to the C<page> option, and prodice an individual output file for each such list. It works in conjuntion with a sprintf-like format in the C<location> option to define the output paths for the individual list files to be produced. Additionally, the L<Miril::List> object passed to your template file has a C<pager> attribute, containing a L<Data::Page> object for the current page.

=item match

The C<match> elemement is used to determine which posts are included in the list. The filtering criteria are:

=over 2

=item type

Only return posts with this type id.

=item author

Only return posts with the specified author.

=item topic

Only return posts with the specified topic id.

=item last

Only return the N most recent posts matching the above criteria.

=back

Only published posts can be included in the list (i.e. posts whose status is C<published> and not C<draft>).

=back

=head3 Specifying template options

In the confiuration file you can specify options for the constructor of the L<Template> object.

  <template>
    DEBUG 1
    <VARIABLES>
      foo    "bar"
      domain "http://www.example.com/"
    </VARIABLES>
  </template>


=head2 Create your output templates

Once the configuration and users files have been set up, you can run Miril and edit content. In order to publish content, however, you need to provide the templates which will be used to render your pages. The templates are rendered using the L<Template> module. Each template used by Miril will be passed either a L<Miril::Post> (if this is a template specified in a type declaration) or a L<Miril::List> object (if this is a template specified in a list declaration). These two objects are described below.

=head3 Posts

Each template used to generate an individual post is passed a C<post> paremeter, which is a C<Miril::Post> object containing all information about the post being rendered. The structure of the C<post> object is as follows:

=over

=item post.title

The title of the post.

=item post.id

The alphanumerical id of the post.

=item post.teaser

The teaser of the post, rendered into html.

=item post.body

The full text of the post, rendered into html.

=item post.type

A C<Miril::Type> object. Has four properties: C<id>, C<name>, C<location> and C<template>.

=item post.url

URL of the post, derived from the type's location and relative to the website root.

=item post.published

A C<Miril::DateTime> object. Has three methods: C<as_epoch> - returns epoch time, C<as_iso> - returns time in an ISO-compliant format suitable for Atom feeds, and C<as_strftime> - returns time formatted on the basis of the L<POSIX/strftime>-compliant string passed as an argument.

=item post.modified

A C<Miril::DateTime> object. See above for details.

=back

Additionally, you can access custom field data using the following syntax in your templates:

  [% post.field('Topic').value %]

Basically, C<post.field('FieldName')> fetches a data object associated with this field, and then you call methods on that object to access its content. Normally you would call a C<value> method to fetch the field value, but field classes may choose to implement additional functionality. For example, the C<Option> class also supplies a C<key> method to fetch the alphanumeric key associated with the current value.

=head3 Lists

Each template used to generate a list is passed aa C<list> paremeter, which is a C<Miril::List> object with the following methods:

=over

=item list.id

List id (as specified in the configuration file).

=item list.title

List title (as specified in the configuration file).

=item list.posts

An array reference of C<Miril::Post> objects contained in the list. See above for details.

=item list.url

The URL where the list will be visible when published, calculated from the C<location> option in the list's specification, and relative to the website root.

=item list.count

The number of posts contained in the list.

=item list.is_grouped

Tells you whether this is a grouped list or not

=item list.group

For a grouped list, tells you the property the list has been grouped by. Would be one of C<date>, C<month>, C<year>, C<topic>, C<type> or C<author>.

=item list.group_key

For a grouped list, holds the value (normally an object) of the property that the list has been grouped by. For example, of C<list.group> is C<topic>, C<list.key> will hold the actual L<Venda::Topic> object for the current list.

The table belos shows how C<group> values relate to Miril objects:

  Group    Object
  -----    ------
  date     Miril::DateTime
  month    Miril::DateTime
  year     Miril::DateTime
  topic    Miril::Topic
  type     Miril::Type
  author   Miril::Author

=item list.is_paged

Tells you whether the list is paged or not.

=item list.page

For a paged list, returns the number of the page that the current list represents.

=item list.timestamp

A C<Miril::DateTime> object representing the time of createion of the list. Useful for Atom feeds.

=item list.post_by_id

Returns an individual post from the list.

=item 

=back

=head2 Create a cgi script

Once you have installed Miril, create a cgi script named C<miril.pl> with the following content:

  #!/usr/bin/perl
  
  use strict;
  use warnings;

  use Miril;

  # setup Miril by pointing it to the websites's base dir
  my $miril = Miril->new( base_dir => '/path/to/website' );
  
  # instantiate and run the cgi app
  Miril::CGI::Application->new( PARAMS => { miril => $miril })->run;

Make sure the file is executable:

  % chmod +x miril.pl

=head1 USER INTERFACE

Once you have configured Miril, you can access it by typing the url of the cgi script you created, e.g. C<http://www.examle.com/cgi-bin/miril.pl>. Miril's user interface has the following elements:

=head2 Browse

This is the main screen. It displays a list of all content entries. It provides links to search entries or to post a new entry. 

=head2 Search

Allows you to search posts by variious criteria.

=head2 Create

This screen is displayed when creating a new post or when modifying an existing one. Most of the options should be self explanatory, but there are a few things to keep in mind:

=over 

=item * 

The ID field is an aplphanumeric string which servers as an unique id for this post. Future versions may create this id automatically and hide it from the user altogether. It may be useful, however, to specify it manually, since this id is used to generate the url of the output file (usually by attacing C<.html> at the end) and the user may want to have control over the url for SEO purposes.

=item *

The status field has two options - C<draft> and C<published>. Posts marked as C<draft> will be available for viewing and editing from Miril's UI, but will not be published to the live website. 

=item * 

The post text is run through a filter before publishing. Currently only Markdown is available via the L<Text::MultiMarkdown> module. 

=item *

Additionally, you can break your post into a teaser and full text by inserting the C<E<lt>!-- BREAK --E<gt>> string somewhere in the post text. The content before the break mark will be available in the C<teser> property of the C<post> object passed to your templates.

=back

Note that saving a posts only updates the database, and does not publish the post to HTML.

=head2 Publish

Clicking the C<Publish> button will generate the website and place all HTML in the outpu folder specified in the configuration file.

=head1 SUPPORT

=head2 Website

The Miril website will be located at L<http://www.miril.org>.

=head2 Bugs and feature requests

Please use the Github issue tracker at L<http://github.com/pshangov/miril/issues> to report bugs and request features.

=head2 Mailing list

Support can be obtained via the Google Groups page: L<http://groups.google.com/group/miril>.

=head2 Repository

Miril is hosted on Github at L<http://github.com/pshangov/miril>.

=head1 AUTHOR

Peter Shangov, C<< <pshangov at yahoo.com> >>

=head1 COPYRIGHT & LICENSE

Copyright 2009-2012 Peter Shangov.

This program is free software; you can redistribute it and/or modify it
under the terms of either: the GNU General Public License as published
by the Free Software Foundation; or the Artistic License.

See http://dev.perl.org/licenses/ for more information.

